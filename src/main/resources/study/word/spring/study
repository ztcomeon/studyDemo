
学习demo
============================================================================================================================
1.jackson 是springboot默认的json处理工具，不需要引入jar包，可以直接使用，fastjson是阿里巴巴的工具、

2.jackson和fastjson区别
fastjson更注重快速，但是jackson和其相比速度并没有差距很大，
jackson优势，可定制性，api灵活，可以定制扩展，代码质量高，fastjson可能会出现bug（不过bug有在修改）
https://www.zhihu.com/question/44199956  参考知乎答案

3.jackson使用
参见TestController和JsonDemoApplicationTests

============================================================================================================================
springboot bean 的生命周期
bean的生命周期，这里是主要的一些，完整的可以在去查资料
  实现了：三个aware接口 BeanNameAware, BeanFactoryAware, ApplicationContextAware,设置bean名称,工厂,上下文
          两个bean的接口 InitializingBean, DisposableBean,初始化和销毁
          后置处理器BeanPostProcessor   初始化方法的前后调用后置处理器
    在Spring中，对象的实例化是通过反射实现的，而对象的属性则是在对象实例化之后通过一定的方式设置的(先实例化,在初始化)

bean启动，BeanConfig类  new出一个实例,实例化
设置bean的属性
BeanNameAware接口  @bean注解中name属性，设置bean的名称
BeanFactoryAware接口，调用setBeanFactory()方法，将BeanFactory容器实例传入
ApplicationContextAware接口 setApplicationContext()方法，将bean所在应用上下文引用传入进来
BeanPostProcessor接口(后置处理器)，调用postProcessBeforeInitialization()方法。
@PostConstruct 注解，(构造函数之后，init()方法之前执行)
InitializingBean接口，调用他们的afterPropertiesSet()方法
initMethod指定的方法，自定义初始化方法
BeanPostProcessor接口(后置处理器)，调用postProcessAfterInitialization()方法
@PreDestory 注解（destory方法之前执行）
DisposableBean接口，调用destory()接口方法
destroyMethod指定的方法，自定义的销毁方法

https://www.cnblogs.com/javazhiyin/p/10905294.html  参考链接
如上图所示，Bean 的生命周期还是比较复杂的，下面来对上图每一个步骤做文字描述:

Spring启动，查找并加载需要被Spring管理的bean，进行Bean的实例化
Bean实例化后对将Bean的引入和值注入到Bean的属性中
如果Bean实现了BeanNameAware接口的话，Spring将Bean的Id传递给setBeanName()方法
如果Bean实现了BeanFactoryAware接口的话，Spring将调用setBeanFactory()方法，将BeanFactory容器实例传入
如果Bean实现了ApplicationContextAware接口的话，Spring将调用Bean的setApplicationContext()方法，将bean所在应用上下文引用传入进来。
如果Bean实现了BeanPostProcessor接口，Spring就将调用他们的postProcessBeforeInitialization()方法。
    @PostConstruct 注解，(构造函数之后，init()方法之前执行)
如果Bean 实现了InitializingBean接口，Spring将调用他们的afterPropertiesSet()方法。
类似的，如果bean使用init-method声明了初始化方法，该方法也会被调用。
如果Bean 实现了BeanPostProcessor接口，Spring就将调用他们的postProcessAfterInitialization()方法。
此时，Bean已经准备就绪，可以被应用程序使用了。他们将一直驻留在应用上下文中，直到应用上下文被销毁
    @PreDestory 注解（destory方法之前执行）
如果bean实现了DisposableBean接口，Spring将调用它的destory()接口方法，
同样，如果bean使用了destory-method 声明销毁方法，该方法也会被调用。

==============================================================================================================================
spring的循环依赖
https://zhuanlan.zhihu.com/p/84267654
https://www.zhihu.com/question/39814046/answer/550590260
关于Spring bean的创建，其本质上还是一个对象的创建，一个完整的对象包含两部分：当前对象实例化和对象属性的实例化。
在Spring中，对象的实例化是通过反射实现的，而对象的属性则是在对象实例化之后，通过一定的方式设置的。（bean生命周期的前两步）

Spring是通过  递归  的方式获取目标bean及其所依赖的bean的；
Spring实例化一个bean的时候，是分两步进行的，首先实例化目标bean，然后为其注入属性。

===========================================================================================
SpringMVC 中的DispatcherServlet流程

1. 用户发请求-->DispatcherServlet，前端控制器收到请求后自己不进行处理，而是委托给其他的解析器进行处理，作为统一访问点，进行全局的流程控制。
2.DispatcherServlet-->HandlerMapping，HandlerMapping将会把请求映射为HandlerExecutionChain对象（包含一个Handler处理器,多个HandlerInterceptor拦截器)。
3.DispatcherServlet-->HandlerAdapter,HandlerAdapter将会把处理器包装为适配器，从而支持多种类型的处理器。
4.HandlerAdapter-->处理器功能处理方法的调用，HandlerAdapter将会根据适配的结果调用真正的处理器的功能处理方法，
完成功能处理，并返回一个ModelAndView对象(包含模型数据，逻辑视图名)
5.ModelAndView的逻辑视图名-->ViewResolver，ViewResoler将把逻辑视图名解析为具体的View。
6.View-->渲染，View会根据传进来的Model模型数据进行渲染，此处的Model实际是一个Map数据结构
7.返回控制权给DispatcherServlet，由DispatcherServlet返回响应给用户。

1.请求                    用户发请求-->DispatcherServlet
2.寻找处理器              DispatcherServlet-->HandlerMapping-->DispatcherServlet
3.适配处理器              DispatcherServlet-->HandlerAdapter
4.调用处理器              HandlerAdapter-->Handler
5.返回ModelAndView        HandlerAdapter-->DispatcherServlet
6.解析view                DispatcherServlet-->ViewResolver-->DispatcherServlet
7.根据Model渲染视图       DispatcherServlet-->View-->DispatcherServlet
8.返回响应                DispatcherServlet-->用户

=======================================================================
启动时，如何运行特定的代码：
实现CommandLineRunner或者实现AplicationRunner来实现启动时运行代码

idea要实现热部署的话，需要添加jar包，然后还需要配置idea，具体可以网上搜

===================================================================
spring的事务：
Spring事务失效的 8 大原因，这次可以吊打面试官了！
https://mp.weixin.qq.com/s/Wi_Y7YjexZFVpALJF3nTUA
1.数据库引擎不支持事务，MyISAM 引擎是不支持事务操作的，InnoDB 才是支持事务的引擎
2.没有被 Spring 管理 （没有注解@Service，成为Spring组件）
3.方法不是 public 的 （@Transactional只能作用在public方法上）
4.自身调用问题    （一个事务方法调用同一个类中的另一个方法或另一个事务方法，都不生效，必需要经过Spring代理，事务才能生效）
5.数据源没有配置事务管理器  有配置PlatformTransactionManager 或者启动类 @EnableTransactionManagement
6.不支持事务(被禁用)     @Transactional(propagation = Propagation.NOT_SUPPORTED)表示不以事务运行，当前若存在事务则挂起
7.异常被吃了 把异常吃了，然后又不抛出来   （事务场景中，抛出异常被catch后，如果需要回滚，一定要手动回滚事务）
8.异常类型错误  throw new Exception("更新错误")  因为默认回滚的是：RuntimeException，如果你想触发其他异常的回滚，
                需要在注解上配置一下，@Transactional(rollbackFor = Exception.class)

SpringBoot声明式事务的简单运用
https://blog.csdn.net/justry_deng/article/details/80828180

================================================================
