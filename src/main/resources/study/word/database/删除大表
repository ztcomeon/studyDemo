Innodb中mysql如何快速删除2T的大表

简答总结一下：
使用硬链接新建一个指向此表node的表，然后在去删除这个大表，这次删除是只删引用，非常快
但是实际的数据还在磁盘上面，之后再去删除这个新建的表，删除实际的数据，但是要注意
使用truncate命令去删除，这样对磁盘IO和CPU都没有影响
========================================
https://www.cnblogs.com/rjzheng/p/9497109.html
一般删表语句：但是删除大表是不能使用这个语句的
drop table xxx;
这个时候所有的mysql的相关进程都会停止，直到drop结束，mysql才会恢复执行
因为：在drop table的时候，innodb维护了一个全局锁，drop完毕锁就释放了。

先说明一下，在这里有一个前提，mysql开启了独立表空间，MySQL5.6.7之后默认开启。
也就是在my.cnf中，有这么一条配置：innodb_file_per_table = 1

查看表空间状态，用下面的命令
show variables like '%per_table';
如果innodb_file_per_table的value值为OFF，代表采用的是共享表空间。
如果innodb_file_per_table的value值为ON ，代表采用的是独立表空间。

共享表空间：某一个数据库的所有的表数据，索引文件全部放在一个文件中，默认这个共享表空间
			的文件路径在data目录下。 默认的文件名为:ibdata1(此文件，可以扩展成多个)。
			运维超级不方便，所有数据都在一个文件里，要对单表维护，十分不方便。
			你在做delete操作的时候，文件内会留下很多间隙，ibdata1文件不会自动收缩
			换句话说，使用共享表空间来存储数据，会遭遇drop table之后，空间无法释放的问题。

独立表空间:每一个表都以独立方式来部署，每个表都有一个.frm表描述文件，还有一个.ibd文件。
		.frm文件：保存了每个表的元数据，包括表结构的定义等，该文件与数据库引擎无关。
		.ibd文件：保存了每个表的数据和索引的文件。
			在这种方式下，每个表都有自已独立的表空间，运维起来方便，可以实现单表在不同数据库之间的移动
			另外，在执行drop table操作的时候，是可以自动回收表空间
			在执行delete后，可以通过alter table TableName engine=innodb可以整理碎片，回收部分表空间。

在绝大部分情况下，运维一定会为mysql选择独立表空间的存储方式，因为采用独立表空间的方式，从性能优化和运维难易角度来说，实在强太多。
在一开始所提到的前提，mysql需要开启独立表空间

正确姿势
假设，我们有datadir = /data/mysql/,另外，我们有有一个database,名为mytest。在数据库mytest中，有一个表，名为erp，执行下列命令

mysql> system ls -l /data/mysql/mytest/
-rw-r----- 1 mysql mysql          9023  8 18 05:21 erp.frm
-rw-r----- 1 mysql mysql 2356792000512  8 18 05:21 erp.ibd
frm和ibd的作用，上面介绍过了。现在就是erp.ibd文件太大，所以删除卡住了。
如何解决这个问题呢？
这里需要利用了linux中硬链接的知识，来进行快速删除。下面容我上《鸟哥的私房菜》中的一些内容，
硬链接：
	硬链接就是一个文件拥有多个文件名字，多个文件名都指向同一个文件
	当硬连接建立以后，硬连接双方任何一个对象被修改，都会造成对应的连接对象被修改
	硬连接是不会建立inode的，他只是在文件原来的inode link count域再增加1而已，
	也因此硬链接是不可以跨越文件系统的

inode是什么？
	硬盘的最小存储单位叫做"扇区"（Sector）。
	系统一次性读取一个"块"（block）。这种由多个扇区组成的"块"，是文件存取的最小单位。
	文件数据都储存在"块"中，我们还必须找到一个地方储存文件的元信息
	这种储存文件元信息的区域就叫做inode，中文译名为"索引节点"。

就是对于真正存储的文件来说
	有一个node Index（inode：存文件相关信息）和存储文件（存内容数据的），

然后呢有一个文件名指向上面的node Index
那么，所谓的硬链接，就是不止一个文件名指向node Index，有好几个文件名指向node Index。
假设，这会又有一个文件名指向上面的node Index，即
	有两个文件名称不同的文件指向node Index（文件1 和文件2）

这个时候，你做了删除文件名(1)的操作，linux系统检测到，还有一个文件名(2)指向node Index，
因此并不会真正的把文件删了，而是把步骤(2)（文件1的引用）的引用给删了，这步操作非常快（只是删除引用）
（通过硬链接的知识可以知道）

接下来，你再做删除文件名(2)的操作，linux系统检测到，没有其他文件名指向该node Index
就会删除真正的存储文件，这步操作，是删真正的文件，所以比较慢。

OK，我们用的就是上面的原理。


数据库大表的具体操作：
先给erp.ibd建立一个硬链接，利用ln命令
mysql> system ln /data/mysql/mytest/erp.ibd /data/mysql/mytest/erp.ibd.hdlk

Linux ln命令是一个非常重要命令，它的功能是为某一个文件在另外一个位置建立一个同步的链接。

你会发现，多了一个erp.ibd.hdlk文件，且erp.ibd和erp.ibd.hdlk的inode均为2。
此时，你执行drop table操作，你会发现，不到1秒就删除了
此时有两个文件名称(erp.ibd和erp.ibd.hdlk),同时指向一个inode.通过硬链接的原理可以知道
这个时候执行删除操作，只是把引用给删了，所以非常快

那么，这时的删除，已经把table从mysql中删除。但是磁盘空间，还没释放，因为还剩一个文件erp.ibd.hdlk。

如何正确的删除erp.ibd.hdlk呢？
如果你没啥经验，一定会回答我，用rm命令来删。这里需要说明的是：
在生产环境，直接用rm命令来删大文件，会造成磁盘IO开销飙升,CPU负载过高，是会影响其他程序运行的。

那么，这种时候，就是应该用truncate命令来删，truncate命令在coreutils工具集中。
有人对rm和truncate命令，专程测试过，truncate命令对磁盘IO，CPU负载几乎无影响。
删除脚本如下：
TRUNCATE=/usr/local/bin/truncate
for i in `seq 2194 -10 10 `;
do
  sleep 2
  $TRUNCATE -s ${i}G /data/mysql/mytest/erp.ibd.hdlk
done
rm -rf /data/mysql/mytest/erp.ibd.hdlk ;

从2194G开始，每次缩减10G，停2秒，继续，直到文件只剩10G，最后使用rm命令删除剩余的部分。

这里指的是，如果数据库是部署在windows上怎么办。一般不会，假设真的碰到了，windows下有一个工具叫mklink，
是在windows下创建硬链接锁用，应该能完成类似功能
