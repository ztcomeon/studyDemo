
敖丙：
--------
消息队列基础.pdf

1.什么场景用到了消息队列
围绕：解耦，异步，削峰（提到消息队列，立马想到这三个名词）
假设某一个场景⾥⾯有很多步骤都是在⼀个流程⾥⾯需要做完的，那么接口的想时间就比较长
某电商公司规定接口的RT（response time响应时间）在200ms以内，超出的需要进行优化
可以优化成异步操作，不重要的模块操作都可异步执行

2.线程也可以异步，为什么不用线程去做异步操作呢
用线程去做的话，每次新加模块操作（线程）都需要修改接口的调用，耦合度比较高
耦合度高的同时，一旦出错，问题排查也比较困难
引入消息队列，能够完成异步，还能接口，当然还能削峰（请求很多，如秒杀的时候，可以先入消息队列，再慢慢消费）
其他模块的执行是否成功需要其他模块自己保障，和主业务解耦

3.引入消息队列造成的问题
1.系统边复杂了，消息丢失，重复消费，顺序消费等问题需要解决
2.数据一致性问题，涉及到分布式的事务
3.可用性，需要保证消息中间件的高可用

4.消息中间件的技术选择问题
根据自身的业务特点去选型，消息中间件的比较见下方

---------
重复消费、顺序消费、分布式事务.pdf

1.如何保证消息不被重复消费：
	这个问题的另一种叫法是：接口幂等性问题（多次执行，结果一样）
	分场景进行校验，要求高的（钱相关的）就用强校验，要求低的可以用弱校验
	强校验：加钱的后面调用加流水的接口，两个放在一个事务里，用 订单号+场景的唯一标识 去查流水表是否已经有
	弱校验：id+场景唯一标识放在redis中作为key，一定时间内去判断
	还有其他很多方式，比如token等

2.如何保证消息顺序消费
    这个开发场景其实不是很多，网上介绍最多的是binlog同步
    思想：将需要按顺序消费的消息通过一种算法，顺序的发送的队列中，顺序消费由消费者去保证
        一个消费者可以保证顺序消费，但是多个消费者（线程）就不能保证顺序消费

3.分布式事务
概念：
    事务：指数据库操作的最小工作单元，是作为单个逻辑工作单元执行的一系列操作（抽象定义）
            简单说：事务是一些列的操作，要么同时成功，要么同时失败
    分布式事务：一个操作，保证涉及到的不同服务同时成功或失败

    分布式事务的大概分类：
        2pc（两段式提交）
        3pc（三段式提交）
        TCC（Try，Confirm，Cancel）
        最大努力通知
        XA
        本地消息表（ebay研发出来的）
        半消息/最终一致（RocketMQ）

    介绍一下（真的只是介绍..）：2pc（两段式提交）和半消息/最终一致性（可以理解分布式事务中消息中间件的使用）
    2pc（两段式提交）：通过消息中间件协调多个系统，在两个系统操作事务的时候，都锁定资源，但是不提交，等
                     两者读准备好了，告诉消息中间件，然后分别提交
                     1.a系统告诉消息中间件准备--准备成功，锁资源，执行操作，不提交
                     2.b系统告诉消息中间件准备--准备成功，锁资源，执行操作，不提交
                     3.a系统提交事务告诉消息中间件提交成功，释放资源
                     4.b系统提交事务告诉消息中间件提交成功，释放资源

    最终一致性：
        1.主动推送方，发送消息，状态待确认给消息中间件
        2.中间件持久化消息
        3.中间件返回消息存储的结果给主动推送方，失败，不执行操作，，成功，执行操作
        4.主动推送方执行操作，DB事务等，并将处理结果发送给中间件
        5.中间件根据处理结果来处理消息（第一步发过来的消息），成功，更新消息状态待发送，失败，删除消息
        6.中间件发送消息给被动接收方
        7.被动接受方进行消息处理等操作

分布式的事务还是要看场景，然后再选型


=================================================================================

孤独烟：
分布式之消息队列复习精讲
https://www.cnblogs.com/rjzheng/p/8994962.html

1.为什么使用消息队列？
2.使用消息队列有什么缺点?
3.消息队列如何选型?
4.如何保证消息队列是高可用的？
5.如何保证消息不被重复消费?
6.如何保证消费的可靠性传输?
7.如何保证消息的顺序性？

--
1.为什么使用消息队列？
优点：解耦、异步、削峰

2.使用消息队列有什么缺点?
缺点：系统的可用性降低，复杂程度加大，毕竟新加入了一个技术

3.消息队列如何选型?
ActiveMQ          RabbitMQ         RocketMQ                   kafka
java                erlang          java                      scala
万级                  万级            10万级                    10万级
ms级                 us级             ms级                     ms级以内
高(主从架构)          高(主从架构)    非常高(分布式架构)          非常高(分布式架构)
                                                              只支持主要的MQ功能，大数据日志
中小型软件公司，建议选RabbitMQ
大型软件公司，根据具体使用在rocketMq和kafka之间二选一

4、如何保证消息队列是高可用的？
集群
rocketMQ集群：就有 多master 模式、多master多slave异步复制模式、多 master多slave同步双写模式
Kafka集群：若干Producer（可以是web前端产生的Page View，或者是服务器日志，系统CPU、Memory等），
           若干broker（Kafka支持水平扩展，一般broker数量越多，集群吞吐率越高），
           若干Consumer Group，以及一个Zookeeper集群
rabbitMQ集群:也有  普通集群,镜像集群模式

对于rabbitMQ集群：
    普通集群：多个机器，每个机器一个rabbitmq实例，创建的queue队列存放在一个rabbitmq上，其他rabbitmq实例同步
            queue的元数据（queue的配置信息，能根据这个找到此queue），消费时如果连接到另一个rabbitmq实例，
            此实例会根据queue所在的实例上拉取数据过来
    镜像集群：rabbitmq的高可用模式，每个rabbitmq实例都有创建的queue的数据和消息，消息到这个queue时，会
            自动把消息同步到多个实例的queue上（就像镜像一样，但是性能开销比较大）

5.如何保证消息不被重复消费?
换句话说就是：  如何保证消息队列的幂等性（接口调用多次，返回结果相同）
那造成重复消费的原因?就是因为  网络传输， bug，数据问题 等等故障
大概思想就是：要有一个唯一标识去区分每一次的消费

6、如何保证消费的可靠性传输?
可靠传输：生产者丢数据，消息中间件丢数据，消费者丢数据 三种情况
rabbitmq：
    生产者丢数据：两个模式，transaction模式和confirm模式
        transaction模式：发前 开启事务(channel.txSelect())，异常  回滚(channel.txRollback())，
                        成功  提交事务(channel.txCommit())。缺点就是吞吐量下降了
        confirm模式：给发送的消息指派一个唯一ID，投递到队列后，rabbitmq会返回ACK（含id）给生产者，
                    如果rabbitMQ没能处理该消息，则会返回一个NACK（含id）给生产者

    消息队列丢数据：开启持久化磁盘的配置，和confirm模式配合使用，可以在持久化之后，在给生产者发ACK
                  这样就算持久化失败，还可以进行重发，如何持久化：
                  1.queue的标志durable设置为true，代表这是一个持久化队列
                  2.发送消息的时候，将delivermode=2
                  这样rabbitmq挂了，重启后也能恢复数据

    消费者丢数据：消费者丢数据是因为一般采用了自动确认消息模式，消费者自动确认收到消息，然后rabbitmq将消息
                立即删除，如果消费者出现异常，就可能没有消费消息，但是rabbitmq已经删除了消息
                解决方案：使用 手动确认消息模式

7.如何保证消息的顺序性？
说明:其实并非所有的公司都有这种业务需求
解决办法：通过某种算法，将需要保证先后顺序的消息放在同一个队列中，然后只用一个消费者去消费

思想：入队有序，出队要考消费者去保证

-------------------------------

孤独烟：
老生常谈——利用消息队列处理分布式事务
https://www.cnblogs.com/rjzheng/p/10115798.html

分布式事务之TCC事务模型
https://www.cnblogs.com/rjzheng/p/10164667.html

感觉讲的还是不够详细，分布式的事务留着之后再学















